"""add txout_unspent

Revision ID: 3865c2e60350
Revises: 4b1e45f9a329
Create Date: 2015-11-22 15:07:49.061373

"""
from __future__ import print_function
from __future__ import division

# revision identifiers, used by Alembic.
from past.utils import old_div
revision = '3865c2e60350'
down_revision = '4b1e45f9a329'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from datetime import datetime
import logging

from reversefold.util import chunked

from pybitcoin import db


log = logging.getLogger(__name__)

CHUNK_SIZE = 1000


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('txout_unspent',
        sa.Column('txout_id', sa.Integer(), nullable=False),
        sa.Column('to_address', sa.String(length=34), nullable=True),
        sa.PrimaryKeyConstraint('txout_id')
    )

    # INSERT INTO txout_unspent (txout_id, to_address) SELECT id, to_address FROM txout WHERE NOT spent
    conn = op.get_bind()
    session = db.Session(bind=conn)
    num_to_insert = session.query(sa.func.count(db.TxOut.id)).filter(sa.func.not_(db.TxOut.spent)).scalar()
    print('Going to insert %u records into txout_unspent' % (num_to_insert,))
    start_time = datetime.now()
    num_inserted = 0
    for chunk in chunked(
        session.query(
            db.TxOut.id, db.TxOut.to_address
        ).filter(
            sa.func.not_(db.TxOut.spent)
        ).yield_per(CHUNK_SIZE),
        chunk_size=CHUNK_SIZE
    ):
        query_start = datetime.now()
        conn.execute(db.TxOutUnspent.__table__.insert().values(chunk))
        query_end = datetime.now()
        num_inserted += len(chunk)
        tot_time = query_end - start_time
        avg_time = old_div(tot_time, num_inserted)
        print('%u / %u %.3f%% done, %u inserted, %s for query, %s total, %s avg, ~%s remaining' % (
            num_inserted,
            num_to_insert,
            num_inserted * 100.0 / num_to_insert,
            len(chunk),
            query_end - query_start,
            tot_time,
            avg_time,
            avg_time * (num_to_insert - num_inserted)))

    # Create indexes after inserting data
    op.create_index('ix_txout_unspent_to_address', 'txout_unspent', ['to_address'], unique=False, postgresql_using='hash')
    op.create_index(op.f('ix_txout_unspent_txout_id'), 'txout_unspent', ['txout_id'], unique=False)
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_txout_unspent_txout_id'), table_name='txout_unspent')
    op.drop_index('ix_txout_unspent_to_address', table_name='txout_unspent')
    op.drop_table('txout_unspent')
    ### end Alembic commands ###
